
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique
  name              String?
  number            String              @unique
  password          String
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransactions  P2PLedger[]         @relation("UserTransaction") // Transactions initiated by this user
  receivedTransactions P2PLedger[]      @relation("RelatedUserTransaction") // Transactions received by this user
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model P2PLedger {
  id                Int         @id @default(autoincrement())
  user_no           String
  amount            Int
  transactionType   LedgerType
  relatedUser_no    String?     // The ID of the other user involved in the transaction (either sender or receiver)
  timestamp         DateTime    @default(now())
  user              User        @relation(fields: [user_no], references: [number], name: "UserTransaction")
  relatedUser       User?       @relation(fields: [relatedUser_no], references: [number], name: "RelatedUserTransaction")
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}

enum LedgerType {
  Credit
  Debit
}